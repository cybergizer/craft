{"version":3,"sources":["webpack://euruko2022/./node_modules/photoswipe/dist/photoswipe.esm.js"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","defaultCSSEasing","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","e","DOMEvents","constructor","this","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","Number","getPanAreaSize","PanBounds","slide","currZoomLevel","center","update","_updateAxis","dispatch","reset","axis","elSize","data","panAreaSize","correctPan","panOffset","ZoomLevel","elementSize","fit","fill","vFill","initial","secondary","maxWidth","maxHeight","hRatio","vRatio","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Slide","isActive","currIndex","currentResolution","pan","isFirstSlide","opener","isOpen","content","contentLoader","getContentBySlide","container","holderElement","heavyAppended","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","Boolean","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","end","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_wasOverFitZoomLevel","_startZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","actionFullName","clickToCloseNonZoomable","classList","toggle","call","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","_intervalTime","_velocityCalculated","isDragging","isZooming","raf","_tapTimer","drag","tapHandler","on","events","scrollWrap","_onClick","bind","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","_clearTapTimer","preventDefault","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","Date","_updateVelocity","_finishTap","_updatePrevPoints","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","setTimeout","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPointer","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","_currPositionIndex","_prevPositionIndex","_containerShiftIndex","itemHolders","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","resetPosition","appendHolders","i","setAttribute","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","KeyboardKeyCodesMap","Escape","z","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Tab","getKeyboardEventKey","key","isKeySupported","Keyboard","_wasFocused","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","returnFocus","focus","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","DEFAULT_EASING","CSSAnimation","props","onFinish","_target","_onComplete","_finished","_onTransitionEnd","_helperTimeout","_finalizeAnimation","removeEventListener","SpringEaser","initialVelocity","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","_raf","easer","prevTime","animationLoop","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","ariaText","innerHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","_a","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","isRegistered","uiElementsData","items","_lastUpdatedZoomLevel","init","sort","a","b","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","imageClickAction","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","addFilter","fn","priority","f1","f2","removeFilter","args","apply","off","Placeholder","imageSrc","imgEl","decoding","alt","src","parentNode","Content","instance","displayedImageWidth","displayedImageHeight","isAttached","isDecoding","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isImageContent","loadImage","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","errorMsgEl","errorMsg","supportsDecode","decode","catch","finally","appendImage","lazyLoadData","createContentFromData","zoomLevel","ceil","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","initialIndex","getContentByIndex","getItemData","lazyLoadSlide","addToCache","removeByIndex","indexToRemove","item","find","PhotoSwipeBase","numItems","dataSource","_getGalleryDOMElements","gallery","dataSourceItem","Array","isArray","Element","_domElementToItemData","galleryElement","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","MIN_OPACITY","Opener","isClosed","isOpening","_duration","_useAnimation","_croppedZoom","_animateRootOpacity","_animateBgOpacity","_placeholder","_opacityElement","_cropContainer1","_cropContainer2","_thumbBounds","_prepareOpen","open","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","_animateZoom","bg","opacity","innerRect","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","decoded","isDelaying","img","reject","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","super","_prepareOptions","_prevViewportSize","isDestroying","hasMouse","_initialItemData","keyboard","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","refreshSlideContent","slideIndex","potentialHolderIndex","holder","matchMedia","matches","test","userAgent","setScrollOffset","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement"],"mappings":"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","file":"545.ac47c64af49d545b75ae.js","sourcesContent":["/*!\n  * PhotoSwipe 5.3.6 - https://photoswipe.com\n  * (c) 2023 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nfunction roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nfunction getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nfunction pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nfunction clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nfunction setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nfunction setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nfunction decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nfunction specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\n\n// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  /* @ts-ignore */\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {Record<Axis, number>} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n    this.currZoomLevel = 1;\r\n    this.center = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.max = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.min = /** @type {Point} */ { x: 0, y: 0 };\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By default, it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.pan = { x: 0, y: 0 };\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap', 'div');\r\n    /** @type {HTMLElement | null} */\r\n    this.holderElement = null;\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n    this.heavyAppended = false;\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load(false);\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\r\n  getPlaceholderElement() {\r\n    return this.content.placeholder?.element;\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    if (!prevZoomLevel) {\r\n      prevZoomLevel = this.zoomLevels.initial;\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\r\n  isPannable() {\r\n    return Boolean(this.width) && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\r\n  isZoomable() {\r\n    return Boolean(this.width) && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  /** @returns {string} */\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = { x: 0, y: 0 };\r\n  }\r\n\r\n  start() {\r\n    if (this.pswp.currSlide) {\r\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    }\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && this.pswp.options.closeOnVerticalDrag\r\n        && (currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit)\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!this.pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        this.pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        if (currSlide) {\r\n          roundPoint(currSlide.pan);\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { velocity } = this.gestures;\r\n    const { mainScroll, currSlide } = this.pswp;\r\n    let indexDiff = 0;\r\n\r\n    this.pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is visible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / this.pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched,\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if ((currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max)\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { velocity } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (this.pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Increasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        this.pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = this.pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    this.pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          this.pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = this.pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta || !currSlide) {\r\n      return false;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (this.pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - (this.pswp.currSlide?.bounds.center.y ?? 0)) / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startPan = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startZoomPoint = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._zoomPoint = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._wasOverFitZoomLevel = false;\r\n    /** @private */\r\n    this._startZoomLevel = 1;\r\n  }\r\n\r\n  start() {\r\n    const { currSlide } = this.gestures.pswp;\r\n    if (currSlide) {\r\n      this._startZoomLevel = currSlide.currZoomLevel;\r\n      equalizePoints(this._startPan, currSlide.pan);\r\n    }\r\n\r\n    this.gestures.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial)\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide?.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === 0) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({ x: 0, y: 0 }, currSlide.pan);\r\n    let destinationPan = equalizePoints({ x: 0, y: 0 }, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\n\n/**\r\n * @template T, P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide?.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide?.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element?.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y' | null} */\r\n    this.dragAxis = null;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = { x: 0, y: 0 }; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = { x: 0, y: 0 }; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.prevP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.velocity = { x: 0, y: 0 };\r\n\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._lastStartP1 = { x: 0, y: 0 };\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._intervalP1 = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]}\r\n     * @private\r\n     */\r\n    this._ongoingPointers = [];\r\n    /** @private */\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    /** @private */\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @private */\r\n    this._intervalTime = 0;\r\n    /** @private */\r\n    this._velocityCalculated = false;\r\n    this.isMultitouch = false;\r\n    this.isDragging = false;\r\n    this.isZooming = false;\r\n    /** @type {number | null} */\r\n    this.raf = null;\r\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\r\n    this._tapTimer = null;\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(\r\n        pswp.scrollWrap,\r\n        'click',\r\n        /** @type EventListener */(this._onClick.bind(this))\r\n      );\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        if (pswp.scrollWrap) {\r\n          pswp.scrollWrap.ontouchmove = () => {};\r\n          pswp.scrollWrap.ontouchend = () => {};\r\n        }\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(\r\n      pswp.scrollWrap,\r\n      pref + down,\r\n      /** @type EventListener */(this.onPointerDown.bind(this))\r\n    );\r\n    events.add(window, pref + 'move', /** @type EventListener */(this.onPointerMove.bind(this)));\r\n    events.add(window, pref + up, /** @type EventListener */(this.onPointerUp.bind(this)));\r\n    if (cancelEvent) {\r\n      events.add(\r\n        pswp.scrollWrap,\r\n        cancelEvent,\r\n        /** @type EventListener */(this.onPointerUp.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse';\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer) => {\r\n        return ongoingPointer.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, { x: 0, y: 0 }));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  /** update points at the start of gesture\r\n   * @private\r\n   */\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  /** @private */\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n    this.slideWidth = 0;\r\n    /** @private */\r\n    this._currPositionIndex = 0;\r\n    /** @private */\r\n    this._prevPositionIndex = 0;\r\n    /** @private */\r\n    this._containerShiftIndex = -1;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = [];\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', 'div', this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    return Boolean(diff);\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    /** @type {ItemHolder | undefined} */\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        if (tempHolder) {\r\n          this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n          this._containerShiftIndex++;\r\n\r\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n        }\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        if (tempHolder) {\r\n          this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n          this._containerShiftIndex--;\r\n\r\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1]?.slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\r\n  moveTo(x, dragging) {\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      let newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      const delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n\r\n    if (this.pswp.container) {\r\n      setTransform(this.pswp.container, x);\r\n    }\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging: dragging ?? false });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\nconst KeyboardKeyCodesMap = {\r\n  Escape: 27,\r\n  z: 90,\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n  Tab: 9,\r\n};\r\n\r\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\r\nconst getKeyboardEventKey = (key, isKeySupported) => {\r\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\r\n};\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    /** @private */\r\n    this._wasFocused = false;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', /** @type EventListener */(this._onFocusIn.bind(this)));\r\n      pswp.events.add(document, 'keydown', /** @type EventListener */(this._onKeyDown.bind(this)));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @private */\r\n  _focusRoot() {\r\n    if (!this._wasFocused && this.pswp.element) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe> | undefined} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y' | undefined} */\r\n    let axis;\r\n    let isForward = false;\r\n    const isKeySupported = 'key' in e;\r\n\r\n    switch (isKeySupported ? e.key : e.keyCode) {\r\n      case getKeyboardEventKey('Escape', isKeySupported):\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case getKeyboardEventKey('z', isKeySupported):\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\r\n        axis = 'x';\r\n        break;\r\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('Tab', isKeySupported):\r\n        this._focusRoot();\r\n        break;\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      // @ts-ignore\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (template\r\n        && document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish = () => {},\r\n      duration = 333,\r\n      easing = DEFAULT_EASING,\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop] ?? '';\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n    /** @private */\r\n    this._finished = false;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transition won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element property was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    this._dampedFrequency = this._naturalFrequency;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\n\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    this._raf = 0;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish = () => {},\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = 0;\r\n  }\r\n}\n\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\r\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\r\n\r\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\r\n  _start(props, isSpring) {\r\n    const animation = isSpring\r\n      ? new SpringAnimation(/** @type SpringAnimationProps */ (props))\r\n      : new CSSAnimation(/** @type CssAnimationProps */ (props));\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', /** @type EventListener */(this._onWheel.bind(this)));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    /** @type {HTMLElement} */\r\n    const element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      const ariaText = ariaLabel || title;\r\n      if (ariaText) {\r\n        element.setAttribute('aria-label', ariaText);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          // @ts-ignore\r\n          pswp[data.onClick]();\r\n        } else if (typeof data.onClick === 'function') {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    /** @type {HTMLElement | undefined} root element by default */\r\n    let container = pswp.element;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      }\r\n    }\r\n\r\n    container?.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nconst arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nconst arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean | undefined} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout | null} */\r\n    let delayTimeout = null;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide?.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(Boolean(pswp.currSlide?.content.isLoading()));\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    if (pswp.ui) {\r\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n    }\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [];\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = () => {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element?.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n\r\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\r\n      return;\r\n    }\r\n\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nfunction getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  /** @type {Bounds | undefined} */\r\n  let thumbBounds;\r\n  /** @type {HTMLElement | null | undefined} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : /** @type {HTMLElement | null} */ (element.querySelector(thumbSelector));\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w || 0,\r\n        itemData.height || itemData.h || 0\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\n\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this.isOpen = false;\r\n    this.isClosing = false;\r\n    this.isOpening = false;\r\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\r\n    this._duration = undefined;\r\n    /** @private */\r\n    this._useAnimation = false;\r\n    /** @private */\r\n    this._croppedZoom = false;\r\n    /** @private */\r\n    this._animateRootOpacity = false;\r\n    /** @private */\r\n    this._animateBgOpacity = false;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\r\n    this._placeholder = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._opacityElement = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._cropContainer1 = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\r\n    this._cropContainer2 = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\r\n    this._thumbBounds = undefined;\r\n\r\n\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n  }\r\n\r\n  /** @private */\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = undefined;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = undefined;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide?.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && slide?.content.usePlaceholder()\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening && slide) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity ?? false;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide?.holderElement;\r\n\r\n      if (pswp.container) {\r\n        pswp.container.style.overflow = 'hidden';\r\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n      }\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity && pswp.bg) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = '1';\r\n        }\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      if (pswp.mainScroll.itemHolders[0]) {\r\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      }\r\n      if (pswp.mainScroll.itemHolders[2]) {\r\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n      }\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve(true);\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve(true);\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _initiate() {\r\n    this.pswp.element?.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element?.classList.toggle('pswp--ui-visible', this.isOpening);\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom && pswp.container) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide?.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      if (pswp.currSlide) {\r\n        pswp.currSlide.zoomAndPanToInitial();\r\n        this._animateTo(\r\n          pswp.currSlide.container,\r\n          'transform',\r\n          pswp.currSlide.getCurrentTransform()\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._animateBgOpacity && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    // do not animate opacity if it's already at 0\r\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    if (currSlide) {\r\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n      if (animate) {\r\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n      } else {\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\r\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PreparedPhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = this._prepareOptions(options || {});\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.viewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     */\r\n    this.bgOpacity = 1;\r\n    this.currIndex = 0;\r\n    this.potentialIndex = 0;\r\n    this.isOpen = false;\r\n    this.isDestroying = false;\r\n    this.hasMouse = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\r\n    this._initialItemData = {};\r\n    /** @type {Bounds | undefined} */\r\n    this._initialThumbBounds = undefined;\r\n\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.topBar = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.template = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.container = undefined;\r\n    /** @type {HTMLElement | undefined} */\r\n    this.scrollWrap = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.currSlide = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n    this.animations = new Animations();\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  /** @returns {boolean} */\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return false;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    if (this.element) {\r\n      this.element.className += ' ' + rootClasses;\r\n    }\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      const { itemHolders } = this.mainScroll;\r\n\r\n      // Add content to the previous and next slide\r\n      if (itemHolders[0]) {\r\n        itemHolders[0].el.style.display = 'block';\r\n        this.setContent(itemHolders[0], this.currIndex - 1);\r\n      }\r\n      if (itemHolders[2]) {\r\n        itemHolders[2].el.style.display = 'block';\r\n        this.setContent(itemHolders[2], this.currIndex + 1);\r\n      }\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    if (this.mainScroll.itemHolders[1]) {\r\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    }\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    return clamp(index, 0, numSlides - 1);\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.appendHeavy();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide?.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide?.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this._listeners = {};\r\n\r\n    if (this.scrollWrap) {\r\n      this.scrollWrap.ontouchmove = null;\r\n      this.scrollWrap.ontouchend = null;\r\n    }\r\n\r\n    this.element?.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.destroy();\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = (this.currSlide?.index ?? 0) - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide?.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = undefined;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  /** @returns {Point} */\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    if (this.bg) {\r\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element?.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp', 'div');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', 'div', this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', 'div', this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PreparedPhotoSwipeOptions} */\r\n    return {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\n\nexport { PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n"],"sourceRoot":""}